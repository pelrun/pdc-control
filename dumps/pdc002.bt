//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

enum <ubyte> command_e {
    FAIL_RESPONSE = 0x01,
    OK_RESPONSE = 0x02,
    UPGRADE_MODE = 0x03, // enters bootloader
    LOCK_FLASH = 0x04,
    UNLOCK_FLASH = 0x05, // needed before flash write/erase
    LOCK_RDP = 0x07,
    UNLOCK_RDP = 0x07, // !! erases chip !!
    FLASH_ERASE = 0x08,
    FLASH_WRITE = 0x09,
    FLASH_READ = 0x0a,
    FLASH_READ_LARGE = 0x0b,
    RESTART = 0x17,
};

struct flash_erase_params {
    ubyte payloadLength;
    uint32 address;
    FSeek(startof(this)+53);
};

struct flash_write_params {
    ubyte payloadLength;
    uint32 destAddress;
    ubyte fwlength; 
    ubyte fwdata[fwlength];
    FSeek(startof(this)+53);
};

struct flash_read_large_params {
    ubyte payloadLength;

    if (payloadLength == 6)
    {
        uint32 address;
        uint16 length;
    }
    else
    {
        ubyte payload[payloadLength];
    }
    FSeek(startof(this)+53);
};

struct flash_read_params {
    ubyte payloadLength;
    uint32 address;
    ubyte length;
    FSeek(startof(this)+53);
};

struct flash_read_response {
    ubyte payloadLength;
    ubyte payload[payloadLength];
    FSeek(startof(this)+53);
};

// all the timestamp shenanigans seem to be just camouflage
// but hiding the responseNeeded bit in the middle
struct timestamp {
    ubyte countA <comment = "(tickCount/1000)&0xff">;
    ubyte countB <comment = "(countA * 0x18) + (tickCount&0xFF)">;
    ubyte countC : 7 <comment = "(tickCount/0x1e)">;
    ubyte responseNeeded : 1;
    ubyte countD <comment = "(countA / 100)">;
    ubyte countE <comment = "tickCount - countD * 100">;
    ubyte countF <comment = "tickCount / 0x50">;
};

struct hid_msg {
    ubyte vendorid[2]; // 0xFF55
    struct timestamp ts;
    enum command_e command;

switch (command)
{
case FLASH_ERASE:
    struct flash_erase_params params;
    break;
case FLASH_WRITE:
    struct flash_write_params params;
    break;
case FLASH_READ_LARGE:
    struct flash_read_large_params params;
    break;
case FLASH_READ:
    if (ts.responseNeeded) {
        struct flash_read_params params;
    } else {
        struct flash_read_response response;
    }
    break;
default:
    FSkip(53);
    //ubyte padding[53];
}
    ubyte checksum[2]; // [0]=sum of bytes 8-61, [1]=sum of bytes 0-61
};

while (!FEof())
{
    struct hid_msg msg;
}

